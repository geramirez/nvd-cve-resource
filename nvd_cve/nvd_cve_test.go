package nvdCVE_test

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/jarcoal/httpmock"

	. "github.com/opencontrol/nvd-cve-resource/nvd_cve"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("nvdCVE", func() {

	Describe("RSS", func() {

		Context("when we make a call to the rss feed", func() {

			var rssData *RSS

			BeforeEach(func() {
				httpmock.Activate()
				defer httpmock.DeactivateAndReset()
				file, err := os.Open("../fixtures/nvd-rss.txt")
				if err != nil {
					fmt.Printf("error: %v", err)
				}
				defer file.Close()
				data, err := ioutil.ReadAll(file)
				if err != nil {
					fmt.Printf("error: %v", err)
				}
				httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
					httpmock.NewStringResponder(200, string(data)))
				rssData = GetRSSData()
			})

			It("Returns the correct number of items", func() {
				Expect(rssData.Items).Should(HaveLen(45))
			})

			It("Returns the correct number of items", func() {
				Expect(rssData.Items[0].Title).Should(Equal("CVE-2014-0236 (php)"))
			})

			It("Returns the correct number of items", func() {
				Expect(rssData.Items[0].Link).Should(Equal("http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0236"))
			})

		})
	})
})
