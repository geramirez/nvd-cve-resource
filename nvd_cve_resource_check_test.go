package resource_test

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/jarcoal/httpmock"

	. "github.com/opencontrol/nvd-cve-resource"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Check Command", func() {
	var (
		command  *CheckCommand
		versions []Version
		err      error
	)

	Context("when this is the first time that the resource has been run", func() {
		Context("when there are no releases", func() {
			BeforeEach(func() {
				httpmock.Activate()
				defer httpmock.DeactivateAndReset()
				httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
					httpmock.NewStringResponder(200, `<rdf:RDF></rdf:RDF>`))
				versions, err = command.Run(CheckRequest{
					Source: Source{Filter: ".*"},
				})
			})

			It("returns no versions", func() {
				Ω(err).ShouldNot(HaveOccurred())
				Ω(versions).Should(BeEmpty())
			})
		})

		Context("when there are releases", func() {
			Context("and new releases are returned", func() {
				BeforeEach(func() {
					httpmock.Activate()
					defer httpmock.DeactivateAndReset()
					file, err := os.Open("fixtures/nvd-rss.txt")
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					defer file.Close()
					data, err := ioutil.ReadAll(file)
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
						httpmock.NewStringResponder(200, string(data)))
					versions, err = command.Run(CheckRequest{
						Source: Source{Filter: ".*"},
					})
				})

				It("outputs the most recent version only", func() {
					Ω(err).ShouldNot(HaveOccurred())
					Ω(versions).Should(HaveLen(1))
					Ω(versions[0]).Should(Equal(Version{Tag: "CVE-2014-0236 (php)"}))
				})
			})
			Context("and all the new releases have been filtered out", func() {
				BeforeEach(func() {
					httpmock.Activate()
					defer httpmock.DeactivateAndReset()
					file, err := os.Open("fixtures/nvd-rss.txt")
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					defer file.Close()
					data, err := ioutil.ReadAll(file)
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
						httpmock.NewStringResponder(200, string(data)))
					versions, err = command.Run(CheckRequest{Source: Source{Filter: "python"}})
				})

				It("no versions are returned", func() {
					Ω(err).ShouldNot(HaveOccurred())
					Ω(versions).Should(HaveLen(0))
				})
			})
		})
	})

	Context("when there is a prior version", func() {
		Context("when there are no new releases", func() {
			BeforeEach(func() {
				httpmock.Activate()
				defer httpmock.DeactivateAndReset()
				file, err := os.Open("fixtures/nvd-rss.txt")
				if err != nil {
					fmt.Printf("error: %v", err)
				}
				defer file.Close()
				data, err := ioutil.ReadAll(file)
				if err != nil {
					fmt.Printf("error: %v", err)
				}
				httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
					httpmock.NewStringResponder(200, string(data)))
				versions, err = command.Run(CheckRequest{
					Version: Version{Tag: "CVE-2014-0236 (php)"},
					Source:  Source{Filter: ".*"},
				})
			})

			It("returns no versions", func() {
				Ω(err).ShouldNot(HaveOccurred())
				Ω(versions).Should(BeEmpty())
			})
		})

		Context("when there are releases", func() {
			Context("and new releases are returned", func() {
				BeforeEach(func() {
					httpmock.Activate()
					defer httpmock.DeactivateAndReset()
					file, err := os.Open("fixtures/nvd-rss.txt")
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					defer file.Close()
					data, err := ioutil.ReadAll(file)
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
						httpmock.NewStringResponder(200, string(data)))
					versions, err = command.Run(CheckRequest{
						Version: Version{Tag: "CVE-2015-3411 (php)"},
						Source:  Source{Filter: ".*"},
					})
				})
				It("returns all of the versions that are newer", func() {
					Ω(err).ShouldNot(HaveOccurred())
					Ω(versions).Should(HaveLen(3))
				})
			})
			Context("and new releases are filtered out", func() {
				BeforeEach(func() {
					httpmock.Activate()
					defer httpmock.DeactivateAndReset()
					file, err := os.Open("fixtures/nvd-rss.txt")
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					defer file.Close()
					data, err := ioutil.ReadAll(file)
					if err != nil {
						fmt.Printf("error: %v", err)
					}
					httpmock.RegisterResponder("GET", "https://nvd.nist.gov/download/nvd-rss.xml",
						httpmock.NewStringResponder(200, string(data)))
					versions, err = command.Run(CheckRequest{
						Version: Version{Tag: "CVE-2015-3411 (php)"},
						Source:  Source{Filter: "python"},
					})
				})
				It("no versions are returned", func() {
					Ω(err).ShouldNot(HaveOccurred())
					Ω(versions).Should(HaveLen(0))
				})
			})
		})
	})

})
